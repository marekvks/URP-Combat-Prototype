//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player Movement"",
            ""id"": ""db117e2f-cc11-49c7-b1db-645249a80db5"",
            ""actions"": [
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""7c85e6ef-8041-40b5-88fc-5a539dae2e1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""1f36cd89-cb4c-49a0-8891-fdb0eebca5f7"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player Combat"",
            ""id"": ""ac98216a-3a80-406c-98b7-a21dd0e8aee4"",
            ""actions"": [
                {
                    ""name"": ""Combo Slash"",
                    ""type"": ""Button"",
                    ""id"": ""41d7a506-6499-45aa-85e5-e495bdb12f23"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Stealth Kill"",
                    ""type"": ""Button"",
                    ""id"": ""b11d0c9f-b898-429c-afc3-884d6c070242"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0be5151c-cf95-4c1b-9a98-aab002885fa0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo Slash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""595074f4-4f81-4fca-9b1a-130e3605d07e"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Stealth Kill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player Movement
        m_PlayerMovement = asset.FindActionMap("Player Movement", throwIfNotFound: true);
        m_PlayerMovement_Run = m_PlayerMovement.FindAction("Run", throwIfNotFound: true);
        // Player Combat
        m_PlayerCombat = asset.FindActionMap("Player Combat", throwIfNotFound: true);
        m_PlayerCombat_ComboSlash = m_PlayerCombat.FindAction("Combo Slash", throwIfNotFound: true);
        m_PlayerCombat_StealthKill = m_PlayerCombat.FindAction("Stealth Kill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player Movement
    private readonly InputActionMap m_PlayerMovement;
    private IPlayerMovementActions m_PlayerMovementActionsCallbackInterface;
    private readonly InputAction m_PlayerMovement_Run;
    public struct PlayerMovementActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerMovementActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Run => m_Wrapper.m_PlayerMovement_Run;
        public InputActionMap Get() { return m_Wrapper.m_PlayerMovement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerMovementActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerMovementActions instance)
        {
            if (m_Wrapper.m_PlayerMovementActionsCallbackInterface != null)
            {
                @Run.started -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRun;
                @Run.performed -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRun;
                @Run.canceled -= m_Wrapper.m_PlayerMovementActionsCallbackInterface.OnRun;
            }
            m_Wrapper.m_PlayerMovementActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Run.started += instance.OnRun;
                @Run.performed += instance.OnRun;
                @Run.canceled += instance.OnRun;
            }
        }
    }
    public PlayerMovementActions @PlayerMovement => new PlayerMovementActions(this);

    // Player Combat
    private readonly InputActionMap m_PlayerCombat;
    private IPlayerCombatActions m_PlayerCombatActionsCallbackInterface;
    private readonly InputAction m_PlayerCombat_ComboSlash;
    private readonly InputAction m_PlayerCombat_StealthKill;
    public struct PlayerCombatActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerCombatActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @ComboSlash => m_Wrapper.m_PlayerCombat_ComboSlash;
        public InputAction @StealthKill => m_Wrapper.m_PlayerCombat_StealthKill;
        public InputActionMap Get() { return m_Wrapper.m_PlayerCombat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerCombatActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerCombatActions instance)
        {
            if (m_Wrapper.m_PlayerCombatActionsCallbackInterface != null)
            {
                @ComboSlash.started -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnComboSlash;
                @ComboSlash.performed -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnComboSlash;
                @ComboSlash.canceled -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnComboSlash;
                @StealthKill.started -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnStealthKill;
                @StealthKill.performed -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnStealthKill;
                @StealthKill.canceled -= m_Wrapper.m_PlayerCombatActionsCallbackInterface.OnStealthKill;
            }
            m_Wrapper.m_PlayerCombatActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ComboSlash.started += instance.OnComboSlash;
                @ComboSlash.performed += instance.OnComboSlash;
                @ComboSlash.canceled += instance.OnComboSlash;
                @StealthKill.started += instance.OnStealthKill;
                @StealthKill.performed += instance.OnStealthKill;
                @StealthKill.canceled += instance.OnStealthKill;
            }
        }
    }
    public PlayerCombatActions @PlayerCombat => new PlayerCombatActions(this);
    public interface IPlayerMovementActions
    {
        void OnRun(InputAction.CallbackContext context);
    }
    public interface IPlayerCombatActions
    {
        void OnComboSlash(InputAction.CallbackContext context);
        void OnStealthKill(InputAction.CallbackContext context);
    }
}
